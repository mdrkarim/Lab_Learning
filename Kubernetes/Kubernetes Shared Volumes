We are working on an application that will be deployed on multiple containers within a pod on Kubernetes cluster. There is a requirement to share a volume among the containers to save some temporary data. The Nautilus DevOps team is developing a similar template to replicate the scenario. Below you can find more details about it.


Create a pod named volume-share-datacenter.

For first container, use image centos with latest tag only and remember to mention tag i.e centos:latest, container should be named as volume-container-datacenter-1, and run a command '/bin/bash', '-c' and 'sleep 10000'. Volume volume-share should be mounted at path /tmp/beta.

For second container, use image centos with latest tag only and remember to mention tag i.e centos:latest, container should be named as volume-container-datacenter-2, and run a command '/bin/bash', 'c' and 'sleep 10000'. Volume volume-share should be mounted at path /tmp/apps.

Volumes to be named as volume-share and use emptyDir: { }.

After creating pods, exec into the first container volume-container-datacenter-1, and create a file beta.txt with content Welcome to xFusionCorp Industries! under the mount path of first container i.e /tmp/beta.

The file beta.txt should be present under the mounted path /tmp/apps of second container volume-container-datacenter-2 as they are using shared volumes.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.


 


sudo vi volume-share-datacenter.yaml

apiVersion: v1
kind: Pod
metadata:
  name: volume-share-datacenter
spec:
  containers:
    - name: volume-container-datacenter-1
      image: centos:latest
      command: ["/bin/bash","-c","sleep 10000"]
      volumeMounts:
      - name: volume-share
        mountPath: /tmp/beta
  
    - name: volume-container-datacenter-2
      image: centos:latest
      command: ["/bin/bash","-c","sleep 10000"]
      volumeMounts:
      - name: volume-share
        mountPath: /tmp/apps
  volumes:
    - name: volume-share
      emptyDir: {}

kubectl create -f volume-share-datacenter.yaml


kubectl delete pods volume-share-datacenter
kubectl describe pod volume-share-datacenter
#more then 1 container
kubectl exec -i -t volume-share-datacenter --container volume-container-datacenter-1 -- /bin/bash

cd /tmp/beta ; ls
echo "Welcome to xFusionCorp Industries!" > beta.txt
cat beta.txt


kubectl exec -i -t volume-share-datacenter --container volume-container-datacenter-2 -- /bin/bash

cd /tmp/apps ; ls

cat beta.txt

































